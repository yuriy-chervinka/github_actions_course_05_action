name: Run And Post

on:
  workflow_dispatch:
    inputs:
      Test_Environment:
        description: 'Test Environment name'
        default: 'dev'
        required: true
        type: choice
        options:
          - dev
          - qa
      Git_Branch:
        description: 'Which branch to use'
        default: 'main'
        required: true
        type: string
      # TEST_PATH:
      #   description: 'Path to the test file relative to the regression folder. For example: "Cust_Documents/test_api_documents.py"'
      #   default: 'Cust_Documents/test_api_documents.py'
      #   required: true
      #   type: string

permissions:
  contents: read

env:
  SELECTED_ENVIRONMENT: ${{ inputs.Test_Environment }}  # Set the selected environment as an environment variable

jobs:
  run-and-post:
    runs-on: [self-hosted, Standard]

    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v3
      #   with:
      #     ref: ${{ inputs.Git_Branch }}

      # - name: Set up Python
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: '3.10.12'

      # - name: Setup chrome
      #   run: |
      #     sudo apt-get -y update
      #     sudo apt-get install -y gnupg2
      #     sudo apt-get install -y gconf-service
      #     sudo apt-get install -y libappindicator1
      #     sudo apt-get -f install
      #     sudo apt-get install -y wget
      #     sudo apt install tree
      #     sudo wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - 
      #     sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
      #     sudo wget -O /tmp/chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 
      #     sudo dpkg -i /tmp/chrome.deb || apt-get install -yf
      #     sudo rm /tmp/chrome.deb     

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --root-user-action=ignore --upgrade pip
      #     mkdir -p /home/ubuntu/actions-runner/_work/pyunitFiles
      #     mkdir -p /home/ubuntu/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages
      #     cp ./einvoicing-automation/einvoicing_tests/setup/gitactions.pth /home/ubuntu/actions-runner/_work/_tool/Python/3.10.12/x64/lib/python3.10/site-packages/ste.pth
      #     cp ./einvoicing-automation/einvoicing_tests/setup/pytest.ini.jenkins /home/ubuntu/actions-runner/_work/e-invoicing-customer-tests/e-invoicing-customer-tests/einvoicing-automation/einvoicing_tests/pytest.ini
      #     cd einvoicing-automation/
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi       

      # - name: Run pytest configuration update
      #   run: |
      #     python3 setup/update_pytest_ini.py "${{ env.SELECTED_ENVIRONMENT }}"
      #   working-directory: einvoicing-automation/einvoicing_tests

      - name: Add authentication secrets for DEV
        if: env.SELECTED_ENVIRONMENT == 'dev'
        env:
          TEST_SECRET: ${{ secrets.TEST_SECRET }}
      - name: Add authentication secrets for QA
        if: env.SELECTED_ENVIRONMENT == 'qa'
        env:
          TEST_SECRET: ${{ secrets.ANOTHER_SECRET }}
      
      - name: Print envs
        run: |
          echo "test secret value is:"
          echo ${{ env.TEST_SECRET }}

      # - name: Run tests
      #   run: |
      #     pytest -v --tb=short --junitxml=${{env.TEST_PATH}}/pyunitFiles/Test_Results.xml "${{ inputs.TEST_PATH }}"
      #   working-directory: einvoicing-automation/einvoicing_tests/test_scripts/regression
      #   continue-on-error: true

